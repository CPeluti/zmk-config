/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE    0
#define NAV     1
#define SYM     2
#define NUM     3
#define ADJ     4

#define HYPER       &sk LG(LC(LA(LSHFT)))
#define MEH         &sk LC(LA(LSHFT))
#define SPACE_LEFT  &kp LC(LEFT)
#define SPACE_RIGHT &kp LC(RIGHT)
#define TAB_LEFT    &kp LG(LS(LBKT))
#define TAB_RIGHT   &kp LG(LS(RBKT))
#define ALFRED      &kp LA(SPACE)
#define SCREENSHOT  &kp LG(LS(S))

#define BTClear &bt BT_CLR
#define BT0     &bt BT_SEL 0
#define BT1     &bt BT_SEL 1
#define BT2     &bt BT_SEL 2
#define BT3     &bt BT_SEL 3
#define BT4     &bt BT_SEL 4

#define TAPPING_TERM 150
#define TAPPING_TERM_GUIALT 200
#define TAPPING_TERM_PINKY 200



&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&sk {
        quick-release;
};

/ {
    behaviors {
        tdA: tap_dance_A {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp A>, <&mt RALT A>;
        };
        tdK: tap_dance_K {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp K>, <&mt RALT K>;
        };
        tdL: tap_dance_L {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp L>, <&mt RALT L>;
        };
        tdSEMI: tap_dance_SEMI {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp SEMI>, <&mt RALT SEMI>;
        };
        tdI: tap_dance_I {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp I>, <&mt RALT I>;
        };
        tdC: tap_dance_C {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp C>, <&mt RALT C>;
        };
        tdE: tap_dance_E {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp E>, <&mt RALT E>;
        };
        tdSQT: tap_dance_SQT {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp SQT>,<&mt RALT SQT>;  
        };
        tdX: tap_dance_X {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp X>, <&mt RALT X>;
        };
        tdS: tap_dance_S {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp S>, <&mt RALT S>;
        };
    };

     conditional_layers {
        compatible = "zmk,conditional-layers";
    
        tri_layer {
            if-layers = <SYM NAV>;
            then-layer = <NUM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            bindings = <
                &trans          &kp Q       &kp W       &kp tdE       &kp R       &kp T       &kp Y       &kp U       &tdI       &kp O     &kp P        &trans
                &trans          &tdA       &tdS       &kp D       &kp F       &kp G       &kp H       &kp J       &tdK       &tdL     &tdSEMI     &tdSQT
                &kp RALT       &kp Z        &tdX       &tdC       &kp V       &kp B       &kp N       &kp M       &kp COMMA   &kp DOT   &kp FSLH     &kp RALT
                                        &kp ENTER   &mo NAV     &kp SPACE   &kp LSHFT   &mo SYM     &kp LCTRL
            >;
        };

        nav_layer {
            bindings = <
            &trans  &kp TAB   &none     SPACE_LEFT  SPACE_RIGHT ALFRED      &none     &kp HOME  &kp END   &kp BSPC  &kp DEL     &trans
            &trans  &sk LSHFT &sk LCTRL &sk LALT    &sk LCMD    MEH         &none     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT   &trans
            &trans  &none     &none     TAB_LEFT    TAB_RIGHT   HYPER       &none     &none     &kp PG_DN &kp PG_UP &none       &trans
                                &trans      &trans      &trans      &trans    &trans    &trans
                >;
        };

        sym_layer {
            bindings = <
            &trans  &kp ESC     &kp DLLR    &kp PRCNT   &kp LPAR    &kp RPAR    &kp CARET   &kp TILDE   &kp GRAVE   &kp PIPE    &kp BSLH        &trans
            &trans  &kp MINUS   &kp PLUS    &kp EQUAL   &kp LBRC    &kp RBRC    &kp HASH    &sk LCMD    &sk LALT    &sk LCTRL   &sk LSHFT       &trans
            &trans  &kp UNDER   &kp STAR    &kp AT      &kp LBKT    &kp RBKT    &none       &kp AMPS    &kp SEMI    &kp COLON   &kp EXCL        &trans
                                    &trans      &trans      &mo ADJ     &trans      &trans      &trans
            >;
        };

        num_layer {
            bindings = <
          &trans    &kp N1    &kp N2    &kp N3    &kp N4     &kp N5      &kp N6    &kp N7     &kp N8     &kp N9     &kp N0          &trans
          &trans    &sk LSHFT &sk LCTRL &sk LALT  &sk LCMD   &kp F11     &kp F12   &sk LCMD   &sk LALT   &sk LCTRL  &sk LSHFT       &trans
          &trans    &kp F1    &kp F2    &kp F3    &kp F4     &kp F5      &kp F6    &kp F7     &kp F8     &kp F9     &kp F10         &trans
                              &trans    &trans     &trans      &trans    &trans     &trans
            >;
        };

        adj_layer {
            bindings = <
                &trans  &none     &none     &none     &none           BTClear         &kp C_VOLUME_UP   &kp C_NEXT         &none       &none     &none      &trans
                &trans  BT4       BT3       BT2       BT1             BT0             &kp C_VOLUME_DOWN &kp C_PREVIOUS     SCREENSHOT  &none     &none      &trans
                &trans  &none     &none     &none     &bootloader     &none           &kp C_MUTE        &kp C_PLAY_PAUSE   &none       &none     &trans     &trans
                                    &trans    &trans          &trans          &trans            &trans          &trans      
            >;
        };

    };
};
